# action.yml in nikolay-e/docker-nginx-vps-deploy-action

name: 'Docker Nginx VPS Deployer (Python)'
description: 'Builds/pushes Docker image, deploys via SSH using Python/Fabric, optionally configures Nginx with SSL.'
author: 'nikolay-e'
branding:
  icon: 'terminal'
  color: 'green'

# --- Inputs ---
inputs:
  # Docker related
  image-name:
    description: "Base name for the Docker image (e.g., 'my-web-app'). No registry/username prefix. Full URL: registry/username/image-name:tag"
    required: true
  docker-registry-username:
    description: "Username for the Docker registry (e.g., Docker Hub username)."
    required: true
  docker-context:
    description: "Path to the Docker build context directory."
    required: false
    default: "."
  docker-file:
    description: "Path to the Dockerfile, relative to docker-context."
    required: false
    default: "Dockerfile"

  # VPS/SSH related
  vps-host:
    description: "Hostname or IP address of the target VPS."
    required: true
  vps-user:
    description: "Username for SSH login to the VPS (must have passwordless sudo)."
    required: true

  # Application/Nginx related
  container-port:
    description: "The host port (on 127.0.0.1) that Nginx will proxy requests to. Example: 8080"
    required: true
  container-internal-port:
    description: "The port the application listens on *inside* the Docker container. Example: 80 or 3000"
    required: false
    default: '80'
  domain:
    description: "The public domain name (e.g., 'app.example.com') for Nginx and SSL."
    required: true

  # Control flags
  nginx-skip:
    description: "Set to 'true' to skip Nginx configuration and reload steps."
    required: false
    default: 'false'
  ssl-skip:
    description: "Set to 'true' to skip SSL certificate deployment (Nginx will be HTTP only if nginx-skip is false)."
    required: false
    default: 'false'
  docker-prune-filter:
    description: "Filter for 'docker image prune -af'. Example: 'until=1h' or 'label=stage=prod'"
    required: false
    default: 'until=1h'

  # Secrets documentation (Passed via env)
  # DOCKER_REGISTRY_TOKEN: Docker registry access token/password.
  # VPS_SSH_PRIVATE_KEY: Private SSH key content (PEM or Base64).
  # SSL_CERT: SSL certificate content (PEM or Base64, needed if ssl-skip is false).
  # SSL_KEY: SSL private key content (PEM or Base64, needed if ssl-skip is false).

# --- Outputs ---
outputs:
  image-tag:
    description: "The short git SHA tag used for the built image (e.g., 'a1b2c3d')."
    value: ${{ steps.docker-metadata.outputs.image_tag }}
  image-url:
    description: "The full URL of the pushed image, including the tag."
    value: ${{ steps.docker-metadata.outputs.image_url }}
  deployment-url:
    description: "The final HTTPS URL (or HTTP if SSL/Nginx skipped) where the application is expected to be available."
    value: ${{ steps.docker-metadata.outputs.deployment_url }}

# --- Action Steps ---
runs:
  using: "composite"
  steps:
    # --- Docker Build & Push Steps ---
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.docker-registry-username }}
        password: ${{ env.DOCKER_REGISTRY_TOKEN }} # Use env var

    - name: Generate Docker Image Metadata
      id: docker-metadata
      shell: bash
      run: |
        IMAGE_TAG=${GITHUB_SHA::7}
        FULL_IMAGE_URL="${{ inputs.docker-registry-username }}/${{ inputs.image-name }}:$IMAGE_TAG"
        LATEST_TAG_ARG=""
        if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/master" ]]; then
          LATEST_IMAGE_URL="${{ inputs.docker-registry-username }}/${{ inputs.image-name }}:latest"
          LATEST_TAG_ARG=$LATEST_IMAGE_URL
        fi
        DEPLOY_PROTO="https"
        if [[ "${{ inputs.nginx-skip }}" == "true" || ("${{ inputs.nginx-skip }}" == "false" && "${{ inputs.ssl-skip }}" == "true") ]]; then
           DEPLOY_PROTO="http"
        fi
        DEPLOY_URL="${DEPLOY_PROTO}://${{ inputs.domain }}"
        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "image_url=$FULL_IMAGE_URL" >> $GITHUB_OUTPUT
        echo "latest_tag_argument=$LATEST_TAG_ARG" >> $GITHUB_OUTPUT
        echo "deployment_url=${DEPLOY_URL}" >> $GITHUB_OUTPUT

    - name: Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.docker-context }}
        file: ${{ inputs.docker-file }}
        push: true
        tags: |
          ${{ steps.docker-metadata.outputs.image_url }}
          ${{ steps.docker-metadata.outputs.latest_tag_argument }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # --- Nginx Config Preparation ---
    - name: Prepare Nginx Configuration (Base64)
      id: prepare-nginx
      if: inputs.nginx-skip == 'false'
      shell: bash
      run: |
        echo "Preparing Nginx config from template for domain '${{ inputs.domain }}'..."
        TEMPLATE_FILE="$GITHUB_ACTION_PATH/nginx_template.conf"
        RENDERED_FILE="nginx.conf.rendered"
        if [ ! -f "$TEMPLATE_FILE" ]; then
          echo "::error::Nginx template file not found at $TEMPLATE_FILE"
          exit 1
        fi
        sed -e "s|__DOMAIN__|${{ inputs.domain }}|g" \
            -e "s|__CONTAINER_PORT__|${{ inputs.container-port }}|g" \
            "$TEMPLATE_FILE" > "$RENDERED_FILE"
        if [ ! -s "$RENDERED_FILE" ]; then
           echo "::error::Rendered Nginx config file is empty."
           exit 1
        fi
        NGINX_CONF_B64=$(base64 -w 0 < "$RENDERED_FILE")
        rm "$RENDERED_FILE"
        echo "Nginx config prepared and Base64 encoded."
        # Use multiline output format to avoid exposing secrets in logs
        {
          echo "nginx_conf_base64<<EOF" >> $GITHUB_OUTPUT
          echo "$NGINX_CONF_B64" >> $GITHUB_OUTPUT 
          echo "EOF" >> $GITHUB_OUTPUT
        }

    # --- Python Deployment Steps ---
    - name: Set up Python Environment
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Python Dependencies
      id: install-deps
      shell: bash
      run: |
        pip install --upgrade pip
        REQ_FILE="$GITHUB_ACTION_PATH/requirements.txt"
        if [ -f "$REQ_FILE" ]; then
          echo "Installing dependencies from $REQ_FILE..."
          pip install -r "$REQ_FILE"
        else
          echo "::warning::requirements.txt not found. Installing default dependencies."
          pip install fabric invoke paramiko
        fi

    - name: Execute Python Deployment Script
      id: deploy-vps-python
      shell: bash
      env: # Pass secrets via environment variables
        SECRET_VPS_SSH_PRIVATE_KEY: ${{ env.VPS_SSH_PRIVATE_KEY }}
        SECRET_SSL_CERT: ${{ env.SSL_CERT }}
        SECRET_SSL_KEY: ${{ env.SSL_KEY }}
        VAR_NGINX_CONF_B64: ${{ steps.prepare-nginx.outputs.nginx_conf_base64 }}
      run: |
        # Use main.py as the entry point now
        PYTHON_SCRIPT="$GITHUB_ACTION_PATH/main.py"
        if [ ! -f "$PYTHON_SCRIPT" ]; then
            echo "::error::Deployment script not found at $PYTHON_SCRIPT"
            exit 1
        fi
        python "$PYTHON_SCRIPT" \
          --host "${{ inputs.vps-host }}" \
          --user "${{ inputs.vps-user }}" \
          --image-url "${{ steps.docker-metadata.outputs.image_url }}" \
          --image-name "${{ inputs.image-name }}" \
          --container-port "${{ inputs.container-port }}" \
          --container-internal-port "${{ inputs.container-internal-port }}" \
          --domain "${{ inputs.domain }}" \
          --nginx-skip "${{ inputs.nginx-skip }}" \
          --ssl-skip "${{ inputs.ssl-skip }}" \
          --docker-prune-filter "${{ inputs.docker-prune-filter }}"